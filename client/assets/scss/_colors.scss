/*
//
// COLORS
// and color functions
//
*/


$spheric-colors: (
  'primary':  #0088ca, // blue
  'accent':   #da932c, // gold
  'alert':    #d65b4a, // red
  'success':  #4faf51, // green
  'white':    #f1f5f8,
  'light':    #dee5ea,
  'dark':     #4b5862
);

$spheric-opacities: (
  'default':    1,
  'secondary': .8,
  'tertiary':  .4,
  'barely':    .1,
  'hidden':     0,
);

@function color-shade($color, $shade: 0%) {

  // Use Foundation's smartscale function to scale the color
  @return smartscale($color, $shade);
}

@function color-opacity($color, $opacity: 1) {

  // Use the number supplied if not a map key
  $alpha: if(type-of($opacity) == 'number', $opacity, map-get($spheric-opacities, $opacity));

  @if $alpha {
    $color: rgba($color, $alpha);
  }

  @return $color;
}

// MAIN FUNCTION TO USE FOR COLORING

@function spheric-color($name, $opacity: 1, $shade: 0) {

  $color: map-get($spheric-colors, $name);

  // first find the shade
  $color: color-shade($color, ($shade * 1%));

  // then find the opacity
  $color: color-opacity($color, $opacity);

  @return $color;
}


.color-block {
  flex: 0 0 auto;
  padding: 1rem;
  margin: 2rem;

  > span {
    display: block;
    height: 2rem;
  }
}

@each $color, $value in $spheric-colors {
  .color-block.#{$color} {
    background: $value;

    // check for lightness of background
    $text: isitlight($value, 'dark', 'white');

    // then apply correct text color in shades
    @each $color, $value in $spheric-opacities {
      .content-color.#{$color} {
        color: spheric-color($text, $color);
      }
    }

    @for $i from 1 through 5 {
      .shade-#{$i} {
        $shade: 60 - ($i * 20);
        background-color: spheric-color($color, 1, $shade);
      }
    }
  }
}

